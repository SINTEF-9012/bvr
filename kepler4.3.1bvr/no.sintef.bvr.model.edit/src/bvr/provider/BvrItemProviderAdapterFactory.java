/**
 */
package bvr.provider;

import bvr.util.BvrAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BvrItemProviderAdapterFactory extends BvrAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BvrItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.Choice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceItemProvider choiceItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.Choice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceAdapter() {
		if (choiceItemProvider == null) {
			choiceItemProvider = new ChoiceItemProvider(this);
		}

		return choiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.Note} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoteItemProvider noteItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.Note}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoteAdapter() {
		if (noteItemProvider == null) {
			noteItemProvider = new NoteItemProvider(this);
		}

		return noteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.Target} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetItemProvider targetItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.Target}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetAdapter() {
		if (targetItemProvider == null) {
			targetItemProvider = new TargetItemProvider(this);
		}

		return targetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.MultiplicityInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplicityIntervalItemProvider multiplicityIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.MultiplicityInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplicityIntervalAdapter() {
		if (multiplicityIntervalItemProvider == null) {
			multiplicityIntervalItemProvider = new MultiplicityIntervalItemProvider(this);
		}

		return multiplicityIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.VClassifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VClassifierItemProvider vClassifierItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.VClassifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVClassifierAdapter() {
		if (vClassifierItemProvider == null) {
			vClassifierItemProvider = new VClassifierItemProvider(this);
		}

		return vClassifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ChoiceOccurrence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceOccurrenceItemProvider choiceOccurrenceItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ChoiceOccurrence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceOccurrenceAdapter() {
		if (choiceOccurrenceItemProvider == null) {
			choiceOccurrenceItemProvider = new ChoiceOccurrenceItemProvider(this);
		}

		return choiceOccurrenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.VType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VTypeItemProvider vTypeItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.VType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVTypeAdapter() {
		if (vTypeItemProvider == null) {
			vTypeItemProvider = new VTypeItemProvider(this);
		}

		return vTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.VClassOccurrence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VClassOccurrenceItemProvider vClassOccurrenceItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.VClassOccurrence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVClassOccurrenceAdapter() {
		if (vClassOccurrenceItemProvider == null) {
			vClassOccurrenceItemProvider = new VClassOccurrenceItemProvider(this);
		}

		return vClassOccurrenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.StagedVariationPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StagedVariationPointItemProvider stagedVariationPointItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.StagedVariationPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStagedVariationPointAdapter() {
		if (stagedVariationPointItemProvider == null) {
			stagedVariationPointItemProvider = new StagedVariationPointItemProvider(this);
		}

		return stagedVariationPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.FragmentSubstitution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FragmentSubstitutionItemProvider fragmentSubstitutionItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.FragmentSubstitution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFragmentSubstitutionAdapter() {
		if (fragmentSubstitutionItemProvider == null) {
			fragmentSubstitutionItemProvider = new FragmentSubstitutionItemProvider(this);
		}

		return fragmentSubstitutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.PlacementFragment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlacementFragmentItemProvider placementFragmentItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.PlacementFragment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlacementFragmentAdapter() {
		if (placementFragmentItemProvider == null) {
			placementFragmentItemProvider = new PlacementFragmentItemProvider(this);
		}

		return placementFragmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ObjectHandle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectHandleItemProvider objectHandleItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ObjectHandle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectHandleAdapter() {
		if (objectHandleItemProvider == null) {
			objectHandleItemProvider = new ObjectHandleItemProvider(this);
		}

		return objectHandleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ReplacementFragmentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplacementFragmentTypeItemProvider replacementFragmentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ReplacementFragmentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplacementFragmentTypeAdapter() {
		if (replacementFragmentTypeItemProvider == null) {
			replacementFragmentTypeItemProvider = new ReplacementFragmentTypeItemProvider(this);
		}

		return replacementFragmentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ValueResolution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueResolutionItemProvider valueResolutionItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ValueResolution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueResolutionAdapter() {
		if (valueResolutionItemProvider == null) {
			valueResolutionItemProvider = new ValueResolutionItemProvider(this);
		}

		return valueResolutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.PrimitveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitveTypeItemProvider primitveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.PrimitveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitveTypeAdapter() {
		if (primitveTypeItemProvider == null) {
			primitveTypeItemProvider = new PrimitveTypeItemProvider(this);
		}

		return primitveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ObjectType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectTypeItemProvider objectTypeItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ObjectType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectTypeAdapter() {
		if (objectTypeItemProvider == null) {
			objectTypeItemProvider = new ObjectTypeItemProvider(this);
		}

		return objectTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.SlotAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlotAssignmentItemProvider slotAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.SlotAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlotAssignmentAdapter() {
		if (slotAssignmentItemProvider == null) {
			slotAssignmentItemProvider = new SlotAssignmentItemProvider(this);
		}

		return slotAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.OpaqueVariationPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueVariationPointItemProvider opaqueVariationPointItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.OpaqueVariationPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueVariationPointAdapter() {
		if (opaqueVariationPointItemProvider == null) {
			opaqueVariationPointItemProvider = new OpaqueVariationPointItemProvider(this);
		}

		return opaqueVariationPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.OVPType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OVPTypeItemProvider ovpTypeItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.OVPType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOVPTypeAdapter() {
		if (ovpTypeItemProvider == null) {
			ovpTypeItemProvider = new OVPTypeItemProvider(this);
		}

		return ovpTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.OVPSemanticSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OVPSemanticSpecItemProvider ovpSemanticSpecItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.OVPSemanticSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOVPSemanticSpecAdapter() {
		if (ovpSemanticSpecItemProvider == null) {
			ovpSemanticSpecItemProvider = new OVPSemanticSpecItemProvider(this);
		}

		return ovpSemanticSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ObjectSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectSpecificationItemProvider objectSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ObjectSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectSpecificationAdapter() {
		if (objectSpecificationItemProvider == null) {
			objectSpecificationItemProvider = new ObjectSpecificationItemProvider(this);
		}

		return objectSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ReplacementFragmentSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplacementFragmentSpecificationItemProvider replacementFragmentSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ReplacementFragmentSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplacementFragmentSpecificationAdapter() {
		if (replacementFragmentSpecificationItemProvider == null) {
			replacementFragmentSpecificationItemProvider = new ReplacementFragmentSpecificationItemProvider(this);
		}

		return replacementFragmentSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.VPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VPackageItemProvider vPackageItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.VPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVPackageAdapter() {
		if (vPackageItemProvider == null) {
			vPackageItemProvider = new VPackageItemProvider(this);
		}

		return vPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ToBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToBindingItemProvider toBindingItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ToBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToBindingAdapter() {
		if (toBindingItemProvider == null) {
			toBindingItemProvider = new ToBindingItemProvider(this);
		}

		return toBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ToPlacement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToPlacementItemProvider toPlacementItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ToPlacement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToPlacementAdapter() {
		if (toPlacementItemProvider == null) {
			toPlacementItemProvider = new ToPlacementItemProvider(this);
		}

		return toPlacementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ToReplacement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToReplacementItemProvider toReplacementItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ToReplacement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToReplacementAdapter() {
		if (toReplacementItemProvider == null) {
			toReplacementItemProvider = new ToReplacementItemProvider(this);
		}

		return toReplacementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.FromBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FromBindingItemProvider fromBindingItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.FromBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFromBindingAdapter() {
		if (fromBindingItemProvider == null) {
			fromBindingItemProvider = new FromBindingItemProvider(this);
		}

		return fromBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.FromPlacement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FromPlacementItemProvider fromPlacementItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.FromPlacement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFromPlacementAdapter() {
		if (fromPlacementItemProvider == null) {
			fromPlacementItemProvider = new FromPlacementItemProvider(this);
		}

		return fromPlacementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.FromReplacement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FromReplacementItemProvider fromReplacementItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.FromReplacement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFromReplacementAdapter() {
		if (fromReplacementItemProvider == null) {
			fromReplacementItemProvider = new FromReplacementItemProvider(this);
		}

		return fromReplacementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.TargetRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetRefItemProvider targetRefItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.TargetRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetRefAdapter() {
		if (targetRefItemProvider == null) {
			targetRefItemProvider = new TargetRefItemProvider(this);
		}

		return targetRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.BCLExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BCLExpressionItemProvider bclExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.BCLExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBCLExpressionAdapter() {
		if (bclExpressionItemProvider == null) {
			bclExpressionItemProvider = new BCLExpressionItemProvider(this);
		}

		return bclExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.OpaqueConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueConstraintItemProvider opaqueConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.OpaqueConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueConstraintAdapter() {
		if (opaqueConstraintItemProvider == null) {
			opaqueConstraintItemProvider = new OpaqueConstraintItemProvider(this);
		}

		return opaqueConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ParametricSlotAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametricSlotAssignmentItemProvider parametricSlotAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ParametricSlotAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametricSlotAssignmentAdapter() {
		if (parametricSlotAssignmentItemProvider == null) {
			parametricSlotAssignmentItemProvider = new ParametricSlotAssignmentItemProvider(this);
		}

		return parametricSlotAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.PrimitiveValueSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveValueSpecificationItemProvider primitiveValueSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.PrimitiveValueSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveValueSpecificationAdapter() {
		if (primitiveValueSpecificationItemProvider == null) {
			primitiveValueSpecificationItemProvider = new PrimitiveValueSpecificationItemProvider(this);
		}

		return primitiveValueSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.BCLConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BCLConstraintItemProvider bclConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.BCLConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBCLConstraintAdapter() {
		if (bclConstraintItemProvider == null) {
			bclConstraintItemProvider = new BCLConstraintItemProvider(this);
		}

		return bclConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.OperationCallExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationCallExpItemProvider operationCallExpItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.OperationCallExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationCallExpAdapter() {
		if (operationCallExpItemProvider == null) {
			operationCallExpItemProvider = new OperationCallExpItemProvider(this);
		}

		return operationCallExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.BooleanLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanLiteralExpItemProvider booleanLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.BooleanLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanLiteralExpAdapter() {
		if (booleanLiteralExpItemProvider == null) {
			booleanLiteralExpItemProvider = new BooleanLiteralExpItemProvider(this);
		}

		return booleanLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.StringLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringLiteralExpItemProvider stringLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.StringLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringLiteralExpAdapter() {
		if (stringLiteralExpItemProvider == null) {
			stringLiteralExpItemProvider = new StringLiteralExpItemProvider(this);
		}

		return stringLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.NumericLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericLiteralExpItemProvider numericLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.NumericLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericLiteralExpAdapter() {
		if (numericLiteralExpItemProvider == null) {
			numericLiteralExpItemProvider = new NumericLiteralExpItemProvider(this);
		}

		return numericLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.IntegerLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerLiteralExpItemProvider integerLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.IntegerLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerLiteralExpAdapter() {
		if (integerLiteralExpItemProvider == null) {
			integerLiteralExpItemProvider = new IntegerLiteralExpItemProvider(this);
		}

		return integerLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.UnlimitedLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnlimitedLiteralExpItemProvider unlimitedLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.UnlimitedLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnlimitedLiteralExpAdapter() {
		if (unlimitedLiteralExpItemProvider == null) {
			unlimitedLiteralExpItemProvider = new UnlimitedLiteralExpItemProvider(this);
		}

		return unlimitedLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.RealLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealLiteralExpItemProvider realLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.RealLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealLiteralExpAdapter() {
		if (realLiteralExpItemProvider == null) {
			realLiteralExpItemProvider = new RealLiteralExpItemProvider(this);
		}

		return realLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.NegResolution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegResolutionItemProvider negResolutionItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.NegResolution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegResolutionAdapter() {
		if (negResolutionItemProvider == null) {
			negResolutionItemProvider = new NegResolutionItemProvider(this);
		}

		return negResolutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.PosResolution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PosResolutionItemProvider posResolutionItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.PosResolution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPosResolutionAdapter() {
		if (posResolutionItemProvider == null) {
			posResolutionItemProvider = new PosResolutionItemProvider(this);
		}

		return posResolutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.VRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VRefItemProvider vRefItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.VRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVRefAdapter() {
		if (vRefItemProvider == null) {
			vRefItemProvider = new VRefItemProvider(this);
		}

		return vRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.VRefValueSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VRefValueSpecificationItemProvider vRefValueSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.VRefValueSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVRefValueSpecificationAdapter() {
		if (vRefValueSpecificationItemProvider == null) {
			vRefValueSpecificationItemProvider = new VRefValueSpecificationItemProvider(this);
		}

		return vRefValueSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ResolutionLiteralDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResolutionLiteralDefinitionItemProvider resolutionLiteralDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ResolutionLiteralDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResolutionLiteralDefinitionAdapter() {
		if (resolutionLiteralDefinitionItemProvider == null) {
			resolutionLiteralDefinitionItemProvider = new ResolutionLiteralDefinitionItemProvider(this);
		}

		return resolutionLiteralDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.ResolutionLiteralUse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResolutionLiteralUseItemProvider resolutionLiteralUseItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.ResolutionLiteralUse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResolutionLiteralUseAdapter() {
		if (resolutionLiteralUseItemProvider == null) {
			resolutionLiteralUseItemProvider = new ResolutionLiteralUseItemProvider(this);
		}

		return resolutionLiteralUseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bvr.BVRModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BVRModelItemProvider bvrModelItemProvider;

	/**
	 * This creates an adapter for a {@link bvr.BVRModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBVRModelAdapter() {
		if (bvrModelItemProvider == null) {
			bvrModelItemProvider = new BVRModelItemProvider(this);
		}

		return bvrModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (choiceItemProvider != null) choiceItemProvider.dispose();
		if (noteItemProvider != null) noteItemProvider.dispose();
		if (targetItemProvider != null) targetItemProvider.dispose();
		if (multiplicityIntervalItemProvider != null) multiplicityIntervalItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (vClassifierItemProvider != null) vClassifierItemProvider.dispose();
		if (choiceOccurrenceItemProvider != null) choiceOccurrenceItemProvider.dispose();
		if (vTypeItemProvider != null) vTypeItemProvider.dispose();
		if (vClassOccurrenceItemProvider != null) vClassOccurrenceItemProvider.dispose();
		if (stagedVariationPointItemProvider != null) stagedVariationPointItemProvider.dispose();
		if (fragmentSubstitutionItemProvider != null) fragmentSubstitutionItemProvider.dispose();
		if (placementFragmentItemProvider != null) placementFragmentItemProvider.dispose();
		if (objectHandleItemProvider != null) objectHandleItemProvider.dispose();
		if (replacementFragmentTypeItemProvider != null) replacementFragmentTypeItemProvider.dispose();
		if (valueResolutionItemProvider != null) valueResolutionItemProvider.dispose();
		if (primitveTypeItemProvider != null) primitveTypeItemProvider.dispose();
		if (objectTypeItemProvider != null) objectTypeItemProvider.dispose();
		if (slotAssignmentItemProvider != null) slotAssignmentItemProvider.dispose();
		if (opaqueVariationPointItemProvider != null) opaqueVariationPointItemProvider.dispose();
		if (ovpTypeItemProvider != null) ovpTypeItemProvider.dispose();
		if (ovpSemanticSpecItemProvider != null) ovpSemanticSpecItemProvider.dispose();
		if (objectSpecificationItemProvider != null) objectSpecificationItemProvider.dispose();
		if (replacementFragmentSpecificationItemProvider != null) replacementFragmentSpecificationItemProvider.dispose();
		if (vPackageItemProvider != null) vPackageItemProvider.dispose();
		if (toBindingItemProvider != null) toBindingItemProvider.dispose();
		if (toPlacementItemProvider != null) toPlacementItemProvider.dispose();
		if (toReplacementItemProvider != null) toReplacementItemProvider.dispose();
		if (fromBindingItemProvider != null) fromBindingItemProvider.dispose();
		if (fromPlacementItemProvider != null) fromPlacementItemProvider.dispose();
		if (fromReplacementItemProvider != null) fromReplacementItemProvider.dispose();
		if (targetRefItemProvider != null) targetRefItemProvider.dispose();
		if (bclExpressionItemProvider != null) bclExpressionItemProvider.dispose();
		if (opaqueConstraintItemProvider != null) opaqueConstraintItemProvider.dispose();
		if (parametricSlotAssignmentItemProvider != null) parametricSlotAssignmentItemProvider.dispose();
		if (primitiveValueSpecificationItemProvider != null) primitiveValueSpecificationItemProvider.dispose();
		if (bclConstraintItemProvider != null) bclConstraintItemProvider.dispose();
		if (operationCallExpItemProvider != null) operationCallExpItemProvider.dispose();
		if (booleanLiteralExpItemProvider != null) booleanLiteralExpItemProvider.dispose();
		if (stringLiteralExpItemProvider != null) stringLiteralExpItemProvider.dispose();
		if (numericLiteralExpItemProvider != null) numericLiteralExpItemProvider.dispose();
		if (integerLiteralExpItemProvider != null) integerLiteralExpItemProvider.dispose();
		if (unlimitedLiteralExpItemProvider != null) unlimitedLiteralExpItemProvider.dispose();
		if (realLiteralExpItemProvider != null) realLiteralExpItemProvider.dispose();
		if (negResolutionItemProvider != null) negResolutionItemProvider.dispose();
		if (posResolutionItemProvider != null) posResolutionItemProvider.dispose();
		if (vRefItemProvider != null) vRefItemProvider.dispose();
		if (vRefValueSpecificationItemProvider != null) vRefValueSpecificationItemProvider.dispose();
		if (resolutionLiteralDefinitionItemProvider != null) resolutionLiteralDefinitionItemProvider.dispose();
		if (resolutionLiteralUseItemProvider != null) resolutionLiteralUseItemProvider.dispose();
		if (bvrModelItemProvider != null) bvrModelItemProvider.dispose();
	}

}
