<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="bvr" nsURI="http:///bvr.ecore/2.0.0" nsPrefix="bvr">
  <eAnnotations source="com.ibm.xtools.common.ui.reduction.editingCapabilities">
    <details key="com.ibm.xtools.activities.umlBBFragment" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBAction" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBClassTemplateParameter" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBPackageTemplateParameter" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBSequence1" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBRelationship1" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBSequence2" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBCollaborationUse" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBRelationship2" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBSubsystem" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBComment1" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBLifeLine" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBComment2" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBActivity1" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBActivity2" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBActivity3" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBFunction" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBActivityDiagram" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBCommunication" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBCollaboration" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBClass" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBInterface" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBUseCaseDiagram" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBTypes1" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBTypes2" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBComponentTemplateParameter" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBTypes3" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBTypes4" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBUseCase1" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBUseCase2" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBPackage" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBComponentDiagram" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBInterfaceTemplateParameter" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBClassDiagram" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBRealization" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBComponent" value="1"/>
    <details key="com.ibm.xtools.activities.umlBBSequenceDiagram" value="1"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EEnum" name="PrimitiveTypeEnum">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>An enumeration of the most primitive types: String, Boolean, Integer, Real and UnlimitedNatural.&lt;/p>"/>
    </eAnnotations>
    <eLiterals name="String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Primitive type String literal.&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="Boolean" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Primitive type Boolean literal.&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="Integer" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Primitive type Integer literal.&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="Real" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Primitive type Real literal.&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="UnlimitedNatural" value="4">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Primitive type UnlimitedNatural literal.&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Choice" eSuperTypes="#//CompoundNode #//ChoiceVSpec">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>A Choice is a VSpec and a VNode that represents a yes/no decision. When a VariationPoint is bound to a choice it is dependent upon whether the resolution is a PosResolution or a NegResolution to determine what VariationPoint to execute.&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>&lt;/span>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : If a choice is implied by parent, it must have a parent.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- Choice&lt;/p>&lt;p>-- If a choice is implied by parent, it must have a parent.&lt;/p>&lt;p>context Choice :&lt;/p>&lt;p>inv isImpliedByParentsImpliesAParent :&lt;/p>&lt;p>self.isImpliedByParent implies VSpec.allInstances()-&amp;gt;exists(vSpec | vSpec.childVSpec-&amp;gt;includes(self))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VSpec" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>VSpec is the metaclass for Variability Specifications. VSpecs are the decision points that need to be resolved, and therefore the VResolutionSpecifications refer to VSpecs. Furthermore, the VSpecs are what controls the materialization and therefore VSpecs are referred by VariationPoints. There are more specifics relating to the specializations of VSpec, VResolutionSpecification and VariationPoint&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>&lt;/span>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : If the VSpec has a multiplicity interval, it must have a number of children included between the lowerMultiplicity and the upperMultiplicity&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- VSpec&lt;/p>&lt;p>-- nbChild_with_MultiplicityInterval :&lt;/p>&lt;p>--If the VSpec has a multiplicity interval, it must have a number of children included between the lowerMultiplicity and the upperMultiplicity&lt;/p>&lt;p>context VSpec :&lt;/p>&lt;p>inv nbChild_with_MultiplicityInterval :&lt;/p>&lt;p>if not self.groupMultiplicity-&amp;gt;isEmpty()&lt;/p>&lt;p>then (self.childVSpec-&amp;gt;size() &amp;gt;= self.groupMultiplicity.lower and self.groupMultiplicity.lower&lt;/p>&lt;p>-1&lt;/p>&lt;p>and self.childVSpec-&amp;gt;size() = self.groupMultiplicity.upper and self.groupMultiplicity.upper&lt;/p>&lt;p>-1)&lt;/p>&lt;p>-- Infinite upper&lt;/p>&lt;p>or (self.groupMultiplicity.lower&lt;/p>&lt;p>-1 and self.groupMultiplicity.upper == (-1) and self.childVSpec-&amp;gt;size() &amp;gt;= self.groupMultiplicity.lower )&lt;/p>&lt;p>-- Infinite lower : no sense for practical purposes&lt;/p>&lt;p>else true&lt;/p>&lt;p>endif&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="resolutionTime" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The latest life-cycle stage at which this VSpec is expected to be resolved, e.g. &quot;Design&quot;, &quot;Link&quot;, &quot;Build&quot;, &quot;PostBuild&quot;, etc. It has no semantics within current BVR.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" ordered="false"
        lowerBound="1" eType="#//Target">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The Target defining the substance of the choice represented by this VSpec. (Many VSpecs may refer the same Target meaning that all these VSpec decision points refer to the same substance)&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>An named element is an element identifiable by name.&lt;/p>&lt;p>Names are composed of letters, numbers, the underscore sign &quot;_&quot; and the dollar sign &quot;$&quot;. The first character of a name must be a letter, an underscore or a dollar sign. Reserved keywords of the constraint language cannot be used as identifiers.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" ordered="false" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The name of the element. Names are composed of letters, numbers, the underscore sign &quot;_&quot;  and the dollar sign &quot;$&quot;. The first character of a name must be a letter, an underscore or a dollar sign.  Reserved keywords of the constraint language cannot be used as identifiers.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="note" ordered="false" upperBound="-1"
        eType="#//Note" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The note is some additional information about this element. It can be anything and it will not be interpreted as significant by the BVR language, but different tooling can interpret the information ad lib.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Note" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Notes are auxiliary information associated with the NamedElements, typically associated with VSpecs and the likes. When the kind is empty it is just a text.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" ordered="false" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString" defaultValueLiteral="Comment">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>kind is a String that designates what this Note is about. kind can typically be an indication about some extra-functional property such as &quot;response time&quot;, or &quot;cost&quot;.&lt;/p>&lt;p>When kind is empty this means that the Note is a plain comment.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="expr" ordered="false" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>expr is the content of the Note. The interpretation of expr is given by the kind. It is tool-specific whether and how the Notes are processed by the tool.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Target" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Target represents the substance of what a VSpec is about. VSpecs are in fact variability decision points, and even in the same VNode tree there may be several VSpecs that refer to the same substance, but the paths to the decision point differ. Constraints talk about Targets.&lt;/p>&lt;p>The substance of what a VSpec is about does not necessarily mean a piece of the base model, but may sometimes refer to exactly that. The essence of &quot;substance&quot; is that the same abstract decision can be reached in different ways in the VSpec tree (variability model).&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CompoundNode" abstract="true" eSuperTypes="#//VNode">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>CompoundNodes are roots in VNode subtrees.&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>&lt;/span>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="member" ordered="false"
        upperBound="-1" eType="#//VNode" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The members of the compound node constituting the next level of the VSpec tree.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTargets" ordered="false"
        upperBound="-1" eType="#//Target" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Targets owned by this CompoundNode.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VNode" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>&lt;/span>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;> VNodes define the trees structures representing implicit logical constraints on the resolution of the children. &lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>Choice, ChoiceOccurrence, VClassifier and VClassOccurrence are all both VNode and VSpec, while a Variable is a VSpec, but not a VNode. VNodes own Variables, however.&lt;/span>&lt;/p>&lt;p>A VNode may optionally have a group multiplicity specifying upper and lower multiplicities against its children. The meaning of this is that each positive resolution (PosResolution) against a VSpec which is also a VNode must have a number of positive child resolutions conforming to the multiplicity interval.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="groupMultiplicity" ordered="false"
        eType="#//MultiplicityInterval" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The group multiplicity of the VNode. If the corresponding VSpec is resolved positively and has a group multiplicity then the number of&lt;br>its children resolved positively must conform to the specified multiplicity interval.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedConstraint" ordered="false"
        upperBound="-1" eType="#//Constraint" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Constraints&amp;nbsp;over&amp;nbsp;the&amp;nbsp;VSPecs&amp;nbsp;over&amp;nbsp;this&amp;nbsp;VInterface"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="variable" ordered="false"
        upperBound="-1" eType="#//Variable" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Owned variables.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MultiplicityInterval">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A MultiplicityInterval specifies lower and upper multiplicities.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;b>&lt;/b>Invariant :&lt;b>&lt;/b> The value of the lower multiplicity must be inferior or equal to the upper multiplicity&lt;/p>&lt;p>&lt;b>&lt;/b>OCL :&lt;b>&lt;/b>&lt;/p>&lt;p>-- MultiplicityInterval&lt;/p>&lt;p>-- lower_inferior_upper : The value of the lower multiplicity must be inferior or equal to the upper multiplicity&lt;/p>&lt;p>context MultiplicityInterval :&lt;/p>&lt;p>inv lower_inferior_upper :&lt;/p>&lt;p>(self.upper == (-1))&lt;/p>&lt;p>or (self.lower &amp;lt;&amp;gt; -1 and self.upper &amp;lt;&amp;gt; -1 and self.lower &amp;lt;= self.upper)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;    The upper multiplicity.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;    The lower multiplicity.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Constraint" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A constraint specifies restrictions on permissible resolution models.&lt;/p>&lt;p>A constraint can refer to any entity in the closest namespace in which it is contained. Entities in other namespaces may be referred through remote notation. Any entity referred by a constraint must be uniquely determined.&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Variable" eSuperTypes="#//VSpec">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>A variable is a VSpec whose resolution requires providing a value of its specified type. When a parametric variation point is bound to a variable, the value provided for the variable as resolution will be used as the actual parameter when applying the variation point during materialization.&lt;/span>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="defaulValue" ordered="false"
        eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The default value of this Variable.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1"
        eType="#//Variabletype">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The type of the variable.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ValueSpecification" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;    A ValueSpecification specifies a value which is either primitive, or an object of the base mode,&amp;nbsp;or a fragment of&#xD;&#xA;    the base model.&amp;nbsp;&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1"
        eType="#//Variabletype" volatile="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The type of the ValueSpecification.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Variabletype" abstract="true" eSuperTypes="#//VPackageable">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>The type of a variable or a value specification.&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VPackageable" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A VPackageable is an element that may be owned by a package.&lt;/p>&lt;p>VPackageable also represent namespaces. A namespace is where the names of the named elements must be unique. Names of other namespaces may be reached by remote notation.&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VClassifier" eSuperTypes="#//VSpec #//CompoundNode">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>VClassifier is a set concept. The instanceMultiplicity defines the range of how many ChoiceResolutions that can be referring this particular VClassifier.&lt;/p>&lt;p>A VClassifier can also have a subtree as it is a CompoundNode which defines subordinate variability specifications (VNodes).&lt;/p>&lt;p>When a repeatable variation point is bound to a VClassifier it will be applied once for each resolution of the VClassifier during materialization.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="instanceMultiplicity" ordered="false"
        lowerBound="1" eType="#//MultiplicityInterval" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a cardinality constraint on the number of instances created from this VClassifier."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VSpecResolution" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A VSpecResolution resolves a VSpec. VSpecResolutions are organized as trees, mirroring partially the tree structure of the VSpecs they resolve.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : We must retrieve at least all of the resolvedVSpec's children associated with the VSpecResolution's vspec children&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- VSpecResolution&lt;/p>&lt;p>-- We must retrieve at least all of the resolvedVSpec's children associated with the VSpecResolution's vspec children&lt;/p>&lt;p>-- So, the number of VSpecResolution's children must be &amp;gt;= to the number of resolvedVSpec' s children&lt;/p>&lt;p>context VSpecResolution&lt;/p>&lt;p>inv VSpecResChildrenCorrespondsToVSpecChildren :&lt;/p>&lt;p>self.childResolution-&amp;gt;size() &amp;gt;= self.resolvedVSpec.childVSpec-&amp;gt;size()&lt;/p>&lt;p>and&lt;/p>&lt;p>not (self.resolvedVSpec.childVSpec-&amp;gt;exists (vSpec | not (self.childResolution-&amp;gt;exists(vRes | vRes.resolvedVSpec == (VSpec)))))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="resolvedVSpec" ordered="false"
        lowerBound="1" eType="#//VSpec">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The VSpec this VSpecResolution resolves.Due to VSpec inheritance and VClassifiers, a given VSpec may have several VSpecResolutions resolving it, where each resolution is in the context of its parent.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChoiceResolution" abstract="true" eSuperTypes="#//VSpecResolution">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A ChoiceResolution is a VSpecResolution which resolves a single choice positively (PosResolution) or negatively (NegResolution).&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : If a choice is selected, the number of selected children must correspond to the multiplicity interval of the resolvedChoice&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ChoiceResolution&lt;/p>&lt;p>-- If a choice is selected, the number of selected children must correspond to the multiplicity interval of the resolvedChoice&lt;/p>&lt;p>context ChoiceResolutuion :&lt;/p>&lt;p>inv selectedChildrenMustCorrespondsToMultiplicityInterval :&lt;/p>&lt;p>if self.resolvedChoice.groupMultiplicity-&amp;gt;isEmpty()&lt;/p>&lt;p>then&lt;/p>&lt;p>(self.resolvedChoice.groupMultiplicity.upper &amp;lt;&amp;gt; (-1)&lt;/p>&lt;p>and self.resolvedChoice.groupMultiplicity.lower &amp;lt;= self.childResolution-&amp;gt;select (choiceRes | choiceRes.oclAsType(ChoiceResolutuion).decision)-&amp;gt;size()&lt;/p>&lt;p>and self.childResolution-&amp;gt;select (choiceRes | choiceRes.oclAsType(ChoiceResolutuion).decision)-&amp;gt;size() &amp;gt;= self.resolvedChoice.groupMultiplicity.upper&lt;/p>&lt;p>)&lt;/p>&lt;p>or&lt;/p>&lt;p>(self.resolvedChoice.groupMultiplicity.upper == (-1)&lt;/p>&lt;p>and self.resolvedChoice.groupMultiplicity.lower &amp;lt;= self.childResolution-&amp;gt;select (choiceRes | choiceRes.oclAsType(ChoiceResolutuion).decision)-&amp;gt;size()&lt;/p>&lt;p>)&lt;/p>&lt;p>else&lt;/p>&lt;p>-- no choice must be selected&lt;/p>&lt;p>self.childResolution-&amp;gt;select (choiceRes | choiceRes.oclAsType(ChoiceResolutuion).decision)-&amp;gt;isEmpty()&lt;/p>&lt;p>endif&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a Choice Resolution has been executed, the resolvedChoice is constained in the selected VSpecs set if the boolean decision is set to true, otherwise, the resolvedChoice is contained in the unselected VSpec set.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ChoiceResolution&lt;/p>&lt;p>context ChoiceResolutuion::eval(ctx : CVLExecutionContext):&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post :&lt;/p>&lt;p>self.decision implies&lt;/p>&lt;p>ctx.selectedVSpecs-&amp;gt;includes(self.resolvedChoice)&lt;/p>&lt;p>and not self.decision implies&lt;/p>&lt;p>ctx.unselectedVSpecs-&amp;gt;includes(self.resolvedChoice)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="resolvedChoice" ordered="false"
        eType="#//Choice">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The resolved choice of this resolution.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="resolvedChoiceOcc" ordered="false"
        eType="#//ChoiceOccurrence">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The resolved choice occurrence&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="resolvedVClassOcc" ordered="false"
        eType="#//VClassOccurrence">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The resolved VClass occurrence&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="resolvedVClassifier" ordered="false"
        eType="#//VClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The resolved classifier&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChoiceOccurrence" eSuperTypes="#//VNode #//ChoiceVSpec">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>ChoiceOccurrence is similar to a Choice, but refers to a VType instead of having the ability to define a subordinate VNode structure.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="vType" ordered="false"
        eType="#//VType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>vType refers to the VType that defines the details of the ChoiceOccurrence&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VType" eSuperTypes="#//CompoundNode #//VPackageable">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>VType is a type of VNodes which means that it represents a pattern of reuse - a subtree of a VNode tree. VTypes are referred by ChoiceOccurrences and VClassOccurrences.&lt;/p>&lt;p>Thus we may informally understand a VType by the following formulas: ChoiceOccurrence+VType == Choice ; VClassOccurrence+VType == VClassifier.&lt;/p>&lt;p>&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VClassOccurrence" eSuperTypes="#//VSpec #//VNode">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>VClassOccurrence is a set concept similar to VClassifier. The difference is that VClassOccurence refers a VType and does not have its own defining subtree.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="vType" ordered="false"
        eType="#//VType"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="instanceMultiplicity" ordered="false"
        eType="#//MultiplicityInterval" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VariationPoint" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>&lt;span style=&quot;color:#000000;&quot;>A variation points is a specification of concrete variability in the base model. &lt;/span>Variation points define specific modifications to be applied to the base model during materialization. They refer to base model elements via base model handles and are bound to VSpecs. &lt;span style=&quot;color:#000000;&quot;>Binding a variation point to a VSpec means that the application of the variation point to the base model during materialization depends on the resolution for the VSpec. The nature of the dependency is specific to the kind of variation point. &lt;/span>&lt;/span>&lt;span style=&quot;font-size:8pt;font-family:Sylfaen;&quot;>&lt;span style=&quot;color:#000000;&quot;>&lt;span style=&quot;font-family:Tahoma;&quot;>&lt;/span>&lt;/span>&lt;/span>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="bindingVSpec" ordered="false"
        lowerBound="1" eType="#//VSpec">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The VSpecs to which the variation point is bound.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="stagedVariationPoint" ordered="false"
        eType="#//StagedVariationPoint" eOpposite="#//StagedVariationPoint/member"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StagedVariationPoint" eSuperTypes="#//VariationPoint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A staged variation point refers to occurrences of VTypes (either VClassOccurrence or ChoiceOccurrence). The point is that realizing occurrences may vary from occurrence to occurrence of the very same VType. Typically the different occurrences of a VType correspond to desired changes in different concrete places of the base model.&lt;/p>&lt;p>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="bindingStagedVP" ordered="false"
        lowerBound="1" eType="#//VSpec">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The binding CVSpec which refers either a ChoiceOccurrence or a VClassOccurrence. &lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="member" ordered="false"
        upperBound="-1" eType="#//VariationPoint" containment="true" eOpposite="#//VariationPoint/stagedVariationPoint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Members of the staged variation point constituting the next level of the tree and corresponding pairwise with the members of the VType of the occurrence referred by the bindingStagedVP&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FragmentSubstitution" eSuperTypes="#//ChoiceVariationPoint #//RepeatableVariationPoint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Fragment Substitution substitutes a placement fragment of the base model with one or more replacement fragments of the base model.&lt;/p>&lt;p>Constraints:&lt;/p>&lt;p>The boundary elements define all references going in and out of the placement fragment. The boundary elements fully define all references going in and out of the replacement fragment.&lt;/p>&lt;p>Semantics:&lt;/p>&lt;p>1. Delete the model elements defined by the PlacementFragment. The placement model elements can be found through FragmentSubstitution.placement's placementBoundaryElements that are of class ToPlacement (using the model element references called insideBoundaryElement) and the transitive closure of all references from these, where the traversal is cut off at any reference that has the same value as any of FragmentSubstitution.placement's PlacementBoundardyElement that are of class FromPlacement (using the model element references called outsideBoundaryElement).&lt;/p>&lt;p>&lt;br>2. For the replacement fragments, copy its content onto the hole made by the deletion of the placement fragment. The placement and replacement boundary elements must correspond. The content model elements can be found through FragmentSubstitution. replacement's ReplacementBoundaryElement that are of type ToReplacement (using the model element references called insideBoundaryElement) and all model elements found through the transitive closure of all references from this set of model elements, where the traversal is cut off at any reference that has the same value as any of FragmentSubstitution.replacement's ReplacementBoundaryElement that are of type FromReplacement (using the model element references called outsideBoundaryElement).&lt;/p>&lt;p>If multi is true, then a number of copies of the replacement fragment will be copied onto the placement. The resolution model will define how many.&lt;/p>&lt;p>Any substitutions addressing placements inside the given replacement fragment will be performed on the copy of the replacement fragment which is the last one generated.&lt;/p>&lt;p>3. Binding boundary elements. The placement and replacement boundary elements are connected by bindings. The bindings are given by the BoundaryElementBindings:&lt;br>1. FromBinding: fromReplacement.insideBoundaryElement.propertyName[] = fromPlacement.outsideBoundaryElement[]&lt;br>2. ToBinding: toPlacement.outsideBoundaryElement.propertyName[] = toReplacement.insideBoundaryElement[]. This definition in fact also covers attributes that have multiplicity. Such attributes may be seen as arrays or collections, and repeated reference assignments to such attributes during variability transformation will mean adding a new individual reference to the identifier collection.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition : &lt;/p>&lt;p>Before the execution of a Fragment Substitution, the placement fragment must exist in the base model.&lt;/p>&lt;p>Post-condition: &lt;/p>&lt;p>After a FragmentSubstitution has been executed, the placement elements cannot be found in the resolved model whereas the replacement elements are in the resolved model.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>context FragmentSubstitution::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre : &lt;/p>&lt;p>self.boundaryElementBinding-&amp;gt;forAll(boundaryElt |boundaryElt.oclIsTypeOf(ToBinding) implies boundaryElt.oclAsType(ToBinding).toPlacement.insideBoundaryElement-&amp;gt;forAll(e |  ctx.resolvedModelElements-&amp;gt;includes(e)) )&lt;/p>&lt;p>post :&lt;/p>&lt;p> self.boundaryElementBinding-&amp;gt;forAll(boundaryElt |boundaryElt.oclIsTypeOf(ToBinding) implies boundaryElt.oclAsType(ToBinding).toPlacement.insideBoundaryElement-&amp;gt;forAll(e | not ctx.resolvedModelElements-&amp;gt;includes(e)) )&lt;/p>&lt;p>           and self.boundaryElementBinding-&amp;gt;forAll(boundaryElt |boundaryElt.oclIsTypeOf(ToBinding) implies boundaryElt.oclAsType(ToBinding).toReplacement.insideBoundaryElement-&amp;gt;forAll(e |  ctx.resolvedModelElements-&amp;gt;includes(e)) )&lt;/p>&lt;p>Note : FragmentSubstitution needs the use of FromBinding and ToBinding metaclasses (please refer to the corresponding pre and post conditions).&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>&lt;p>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="boundaryElementBinding"
        ordered="false" upperBound="-1" eType="#//BoundaryElementBinding" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>&#xD;&#xA;    Specifies the binding between the placement and replacement fragments.&#xD;&#xA;&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="placement" ordered="false"
        lowerBound="1" eType="#//PlacementFragment">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Specifies the fragment to be replaced. The placement fragment will be removed once.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="multi" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Indicates multiple fragment substitution meaning that the substitution can be executed several times without removing the placement more than once.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="replacement" ordered="false"
        eType="#//ReplacementFragmentType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Specifies the replacement fragment that will replace the placement.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChoiceVariationPoint" abstract="true"
      eSuperTypes="#//VariationPoint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A choice variation point is a variation point which may be bound to a&lt;span style=&quot;font-size:8pt;&quot;> choice. During materialization the resolution of the choice determines whether or not the variation point will be applied or not.&lt;/span>&lt;/p>&lt;p>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="bindingChoice" ordered="false"
        eType="#//Choice">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The binding choice.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="bindingChoiceOcc" ordered="false"
        eType="#//ChoiceOccurrence">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The binding choice occurrence&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="resolution_kind" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="True">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The resolution_kind has the following definition:&lt;/p>&lt;p>True: The enclosing ChoiceVariationPoint shall be executed if the triggering resolution is a PosResolution.&lt;/p>&lt;p>False: The enclosing ChoiceVariationPoint shall be executed if the triggering resolution is a NegResolution.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RepeatableVariationPoint" abstract="true"
      eSuperTypes="#//VariationPoint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&lt;span>&lt;span style=&quot;font-size:8pt;&quot;>A repeatable variation point is a variation point that may be applied several times during materialization. It may only be bound to a VClassifier (or VClassOccurrence) and is applied once for each resolution referring to it. &lt;/span>&lt;/span>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="bindingClassifier" ordered="false"
        eType="#//VClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The binding classifier.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="bindingVClassOcc" ordered="false"
        eType="#//VClassOccurrence">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>binding VClassifier occurrence&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BoundaryElementBinding" abstract="true"
      eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Specifies the binding between the boundary elements of the placement fragment and the replacement fragment."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PlacementFragment" eSuperTypes="#//VariationPoint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A PlacementFragment defines a fragment (set of model elements) of the base model that will be replaced by a&#xD;&#xA;ReplacementFragment during the variability transformation. The set of model elements of the fragment will be deleted."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="placementBoundaryElement"
        ordered="false" upperBound="-1" eType="#//PlacementBoundaryElement" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The boundary elements captures all the relations from and to the fragment."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceObject" ordered="false"
        upperBound="-1" eType="#//ObjectHandle" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PlacementBoundaryElement" abstract="true"
      eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Represents the boundary between a placement fragment and the rest of the base model."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ObjectHandle">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;    An object handle identifies an object of the base model. This Class abstracts over the cross-domain referencing&#xD;&#xA;    mechanism needed to refer from CVL elements to base model objects.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="MOFRef" lowerBound="1"
        eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReplacementFragmentType" eSuperTypes="#//Variabletype">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Replacement Fragment Type defines a fragment of the base model that will be used as replacement for some placement fragment&lt;br>of the base model.&lt;/p>&lt;p>Constraints:&lt;/p>&lt;p>The placements contained in a replacement fragments should only involve model elements which are inside the replacement fragment. These placements can be used in all instances of a replacement fragment.&lt;/p>&lt;p>Semantics:&lt;/p>&lt;p>The semantics of Replacement Fragment Type can be found under Fragment Substitution.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant :&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>&lt;p>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="replacementBoundaryElement"
        ordered="false" upperBound="-1" eType="#//ReplacementBoundaryElement" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The boundary elements captures all the relations from and to the fragment."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="placementFragment" ordered="false"
        upperBound="-1" eType="#//PlacementFragment" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Set of placements contained by the replacement fragment."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceObject" ordered="false"
        upperBound="-1" eType="#//ObjectHandle" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReplacementBoundaryElement" abstract="true"
      eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Represents the boundary between a replacement fragment and the rest of the base model."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ValueResolution" eSuperTypes="#//VSpecResolution">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A ValueResolution is a VSpecResolution which resolves a variables by providing a value of the variable's type.&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of a ValueResolution, the variable stored in the ValueResolution must exist in the variable dictionary.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a ValueResolution has been executed, the resolvedVariable is assigned with the value.&lt;/p>&lt;p>&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>context ValueResolution::eval(ctx : CVLExecutionContext) :&lt;/p>&lt;p>pre: not ctx.variabledictionary-&amp;gt;exists(p | p.elements-&amp;gt;exists ( k | k.key == (self.resolvedVariable.name)))&lt;/p>&lt;p>post: ctx.variabledictionary-&amp;gt;exists(p | p.elements-&amp;gt;exists ( k| k.key == (self.resolvedVariable.name) and k.value == (self.value)) )&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="resolvedVariable" ordered="false"
        lowerBound="1" eType="#//Variable">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The resolved variable.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" ordered="false"
        lowerBound="1" eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The value assigned.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitveType" eSuperTypes="#//Variabletype">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A type of a variable which is either String, Integer,UnlimitedNatural, Real, or Boolean.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" ordered="false" lowerBound="1"
        eType="#//PrimitiveTypeEnum">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The primitive type as an enumeration value.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ObjectType" eSuperTypes="#//Variabletype">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A type of objects in the base model, specified as a metaclass in the metamodel of which the base model in an instance."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="metaClass" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The name of the metaclass in the metamodel of which the base model is an instance."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SlotAssignment" eSuperTypes="#//ChoiceVariationPoint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A slot assignment is a choice variation point which specifies a value to be assigned to a particular slot in a particular object in the base model. The object is identified via an object handle pointing to the base model, and the slot is identified via its name, stored in the slotIdentifier attribute. The value to be assigned is specified explicitly.&lt;/p>&lt;p>When this variation point is applied, the specified value is inserted into the base model slot.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : The property named as self.slotIdentifier must exist in the slotOwner object&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- SlotAssigmnent&lt;/p>&lt;p>-- The property named as self.slotIdentifier must exist in the slotOwner object&lt;/p>&lt;p>context SlotAssignment :&lt;/p>&lt;p>inv propertyIn_slotOwner :&lt;/p>&lt;p>if self.SlotOwner&lt;/p>&lt;p>null&lt;/p>&lt;p>then&lt;/p>&lt;p>self.SlotOwner.getPropertyByName(self.slotIdentifier)&lt;/p>&lt;p>null&lt;/p>&lt;p>else&lt;/p>&lt;p>-- if SlotOwner does not exists neither the property&lt;/p>&lt;p>false&lt;/p>&lt;p>endif&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of a SlotAssignment, the SlotOwner object must exist in the base model and it must have a MOF property called as in the slotIdentifier.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a SlotAssignment has been executed, the MOF property called as in the slotIdentifier in the SlotOwner has been assigned with the value value.&lt;/p>&lt;p>Note : To express more easily this OCL pre condition, we add the operations getPropertyByName(String propertyName) and getPropertyValue(String propertyName) on the ObjectHandle metaclass to obtain respectively the property with the given name and the value associated with this property.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>context SlotAssignment::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre : self.SlotOwner&lt;/p>&lt;p>null and ctx.resolvedModelElements->includes(self.SlotOwner) and self.SlotOwner->asOrderedSet()->first().getPropertyByName(self.slotIdentifier)&lt;/p>&lt;p>null&lt;/p>&lt;p>post : self.SlotOwner->asOrderedSet()->first().getPropertyValue(self.slotIdentifier)->asOrderedSet()->first() == (self.value)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="slotIdentifier" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The name of the MOF Property&amp;nbsp;in the object's metaclass identifying the slot to which the value is to be assigned."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" ordered="false"
        eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The value to be assigned."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="slotOwner" ordered="false"
        lowerBound="1" eType="#//ObjectHandle" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The object handle identifying the base model object to whose slot the value is to be assigned."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OpaqueVariationPoint" eSuperTypes="#//VariationPoint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>An OpaqueVariationPoint is an executable, domain-specific variation point whose semantics is not defined by BVR. It is the responsibility of the specific domain to execute this kind of variation point.&lt;br>&lt;br>If bound to a choice then an OpaqueVariation point will be executed upon a positive decision. If bound to a VClassifier then it will be executed once for each instance created from it. If bound to a variable then it will be executed when a value is assigned to it, also providing the value as parameter for the execution.&lt;br>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="placeHolder" ordered="false"
        lowerBound="1" eType="#//ObjectHandle" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The place holder of the OpaqueVariationPoint.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1"
        eType="#//OVPType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The transformation used by the opaque variation point.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OVPType" eSuperTypes="#//VPackageable">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>OVPType (Opaque Variation Point type) is a model transformation pattern which may be used to define an opaque variation point.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="spec" ordered="false" lowerBound="1"
        eType="#//OVPSemanticSpec" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Reference to the specification.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OVPSemanticSpec">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>OVPSermanticSpec describes a transformation which will be performed by an OpaqueVariationPoint. The transformation is given as a string containing a textual definition of the transformation in the given transformation language. The transformation language is also given in the OVPSemanticSpec.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="modelTransformation" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Model Transformation specification as String.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="transfromationLanguage"
        ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Language of the model transformation.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ObjectSpecification" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An ObjectSpecification specifies a value which is an object of the base mode through an object handle."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="object" ordered="false"
        lowerBound="1" eType="#//ObjectHandle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The object specified."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReplacementFragmentSpecification" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A value of ReplacementFragmentType"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VPackage" eSuperTypes="#//VPackageable">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A VPacakge (Variability Package) is the packaging mechanism of BVR.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="packageElement" ordered="false"
        upperBound="-1" eType="#//VPackageable" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Elements contained in this VPackage.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ToBinding" eSuperTypes="#//BoundaryElementBinding">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>ToBinding defines a binding between boundary elements of kind ToPlacement/ToReplacement. The ToPlacement boundary element&lt;br>has to be bound to the ToReplacement.&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : The ToPlacement boundary element must be bound to the ToReplacement element&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- The ToPlacement boundary element must be bound to the ToReplacement element&lt;/p>&lt;p>context ToBinding :&lt;/p>&lt;p>inv mustBeBoundToTheToReplacement :&lt;/p>&lt;p>self.toPlacement.toReplacement = self.toReplacement&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition : &lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition: &lt;/p>&lt;p>After a FragmentSubstitution has been executed (and as a consequence a ToBinding), the elements that referenced before the placement inside model elements reference now the replacement inside model elements.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ToBinding&lt;/p>&lt;p>-- (FragmentSubstitution : the placement and replacement boundary elements are connected by bindings)&lt;/p>&lt;p>-- toPlacement.outsideBoundaryElement.propertyName[] = toReplacement.insideBoundaryElement[]&lt;/p>&lt;p>context ToBinding::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post : self.toPlacement.outsideBoundaryElement.getPropertyValue(self.toPlacement.propertyName)-&amp;gt;forAll( val | val.oclIsTypeOf(ObjectHandle) and  self.toReplacement.insideBoundaryElement-&amp;gt;includes(val.oclAsType(ObjectHandle)))&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="toPlacement" ordered="false"
        lowerBound="1" eType="#//ToPlacement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the ToPlacement boundary element that is part of the binding."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="toReplacement" ordered="false"
        lowerBound="1" eType="#//ToReplacement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the ToReplacement boundary element that is part of the binding."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ToPlacement" eSuperTypes="#//PlacementBoundaryElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>ToPlacement is the kind of boundary element that defines the boundary between the owning placement fragment and the rest of the base model. The insideBoundaryElements denote the ModelElements of owning fragment that are referred to by outside model elements. The outsideBoundaryElement together with the propertyName denotes the attributes of model elements on the outside of the placement fragment that refer to the inside boundary model elements.&lt;/p>&lt;p>Constraints:&lt;/p>&lt;p>insideBoundaryElement = outsideRef.insideBoundaryElement outsideBoundaryElement != null xor outsideRef != null&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant :&lt;/p>&lt;p > Constraint : &lt;/p>&lt;p >1) self.outsideBoudaryElement &amp;lt;&amp;gt; null xor outsideRef != null&lt;/p>&lt;p >2) All outsideBoundaryElement point on insideBoundaryElement&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ToPlacement&lt;/p>&lt;p>-- The outsideBoundaryElement together with the propertyName denotes the attributes of model elements outside of the placement fragment that refer to the inside boundary model elements&lt;/p>&lt;p>-- Constraint : &lt;/p>&lt;p>-- 1) self.outsideBoudaryElement &amp;lt;&amp;gt; null xor outsideRef != null&lt;/p>&lt;p>--  2) All outsideBoundaryElement point on insideBoundaryElement&lt;/p>&lt;p>context ToPlacement :&lt;/p>&lt;p> inv insideBoundaryElements_outsideRef :&lt;/p>&lt;p>                -- 1) self.outsideBoudaryElement &amp;lt;&amp;gt; null&lt;/p>&lt;p>                (not self.outsideBoundaryElement-&amp;gt;isEmpty()&lt;/p>&lt;p>        xor self.outsideBoundaryElement.getPropertyValue(self.propertyName) &amp;lt;&amp;gt; null)&lt;/p>&lt;p>        and&lt;/p>&lt;p>                --  2) All outsideBoundaryElement point on insideBoundaryElement&lt;/p>&lt;p>                self.outsideBoundaryElement.getPropertyValue(self.propertyName)-&amp;gt;forAll( val | self.insideBoundaryElement-&amp;gt;includes(val.oclAsType(ObjectHandle) ))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="toReplacement" ordered="false"
        eType="#//ToReplacement" eOpposite="#//ToReplacement/toPlacement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Reference to a ToReplacement in a containing replacement fragment."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="propertyName" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Name of the attribute to be changed."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="insideBoundaryElement"
        ordered="false" upperBound="-1" eType="#//ObjectHandle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Model elements that are referred to by outside model elements. Used to distinguish miltiplicity references."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outsideBoundaryElement"
        ordered="false" eType="#//ObjectHandle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Outside model elements that refer model elements inside the fragment."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ToReplacement" eSuperTypes="#//ReplacementBoundaryElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&#xD;&#xA;    ToReplacement is the kind of boundary element that defines the inwards boundary of the owning replacement fragment. The&#xD;&#xA;    insideBoundaryElement defines the starting points for the traversal to isolate the model elements that as part of a&#xD;&#xA;    fragment substitution will be copied into the placement fragment.&#xD;&#xA;&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="insideBoundaryElement"
        ordered="false" upperBound="-1" eType="#//ObjectHandle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Model elements that are referred to by outside model elements."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outsideBoundaryElement"
        ordered="false" eType="#//ObjectHandle"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="toPlacement" ordered="false"
        eType="#//ToPlacement" eOpposite="#//ToPlacement/toReplacement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Reference to a ToPlacement contained by the replacement fragment."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FromBinding" eSuperTypes="#//BoundaryElementBinding">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>FromBinding defines a binding between boundary elements of kind FromPlacement/FromReplacement. The FromPlacement boundary&lt;br>element that has to be bound to the FromPlacement.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : The FromPlacement boundary element must be bound to the FromReplacement element.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>&lt;/p>&lt;p>-- The FromPlacement boundary element must be bound to the FromReplacement element&lt;/p>&lt;p>context FromBinding :&lt;/p>&lt;p>inv mustBeBoundToTheReplacement :&lt;/p>&lt;p>self.fromPlacement.fromReplacement = self.fromReplacement&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition : &lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition: &lt;/p>&lt;p>After a FragmentSubstitution has been executed (and as a consequence a FromBinding), the elements inside the replacement element references the element outside the placement elements. These outside elements referenced before the placement elements.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- FromBinding&lt;/p>&lt;p>-- (FragmentSubstitution : the placement and replacement boundary elements are connected by bindings)&lt;/p>&lt;p>-- fromReplacement.insideBoundaryElement.propertyName[] = fromPlacement.outsideBoundaryElement[]&lt;/p>&lt;p>context FromBinding::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post : self.fromReplacement.insideBoundaryElement.getPropertyValue(self.fromReplacement.propertyName)-&amp;gt;forAll( val | val.oclIsTypeOf(ObjectHandle) and  self.fromPlacement.outsideBoundaryElement-&amp;gt;includes(val.oclAsType(ObjectHandle)))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="fromPlacement" ordered="false"
        lowerBound="1" eType="#//FromPlacement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the FromPlacement boundary element that is part of the binding."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="fromReplacement" ordered="false"
        lowerBound="1" eType="#//FromReplacement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the FromReplacement boundary element that is part of the binding."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FromPlacement" eSuperTypes="#//PlacementBoundaryElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="FromPlacement is the kind of boundary element that defines the outwards boundary of the owning placement fragment. The&#xD;&#xA;outsideBoundaryElement refers to the model elements on the outside of the placement fragment. In a fragment substitution&#xD;&#xA;these have to be referred by model elements within the replacement fragment."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="fromReplacement" ordered="false"
        eType="#//FromReplacement" eOpposite="#//FromReplacement/fromPlacement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Reference to a FromReplacement in a containing replacement fragment."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outsideBoundaryElement"
        ordered="false" upperBound="-1" eType="#//ObjectHandle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Outside Model Elements are element that are referred by the model elements inside the placement fragment (but which are themselves not inside the placement fragment).&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="insideBoundaryElement"
        ordered="false" eType="#//ObjectHandle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Insiude boundary elements refer to elements inside the fragment.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FromReplacement" eSuperTypes="#//ReplacementBoundaryElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="FromReplacement is the kind of boundary element that defines the outwards boundary of the owning replacement fragment.&#xD;&#xA;propertyName is the name of the reference attribute of inside boundary model element that will be changed as part of a&#xD;&#xA;fragment substitution. The insideBoundaryElements refer to the base model elements that will have their reference&#xD;&#xA;attributes updated as part of a fragment substitution. The outsideBoundaryElement refers to the model elements on the&#xD;&#xA;outside of the replacement fragment. In a fragment substitution these references are used to define the extent of the&#xD;&#xA;replacement fragment."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="propertyName" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Name of the attribute to be changed."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="insideBoundaryElement"
        ordered="false" eType="#//ObjectHandle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Inside model elements that refer outside model elements."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outsideBoundaryElement"
        ordered="false" upperBound="-1" eType="#//ObjectHandle">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Outside model elements that are referred by model elements inside the fragment. Used to distinguish multiplicity references.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="fromPlacement" ordered="false"
        eType="#//FromPlacement" eOpposite="#//FromPlacement/fromReplacement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Reference to a FromPlacement contained by the replacement fragment."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TargetRef" eSuperTypes="#//BCLExpression">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A constraint expression that references a Target and through that a set of VSpecs. It must reference existing VSpecs.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" ordered="false"
        lowerBound="1" eType="#//Target">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Reference to the Target.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BCLExpression">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A generic class for expressions of the basic constraint language (BCL).&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OpaqueConstraint" eSuperTypes="#//Constraint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>An Opaque Constraint imposes additional restrictions that cannot be expressed in the basic constraint language.&lt;/p>&lt;p>Opaque constraints can be expressed in any language (given by the language attribute) but cannot be directly understood as BVR.&lt;/p>&lt;p>Typically an opaque constraint must be used if there is a need to express universal quantification or other advanced expressiveness. OCL is an obvious choice for such a more advanced constraint language.&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="constraint" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Constraint as an opaque String.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="constraintLanguage" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Language of the OpaqueConstraint as a String.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParametricVariationPoint" abstract="true"
      eSuperTypes="#//VariationPoint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>&lt;span>&lt;span style=&quot;font-size:8pt;&quot;>A parametric variation point is a variation point that depends on a parameter and must be bound to a variable. During materialization the value supplied as the resolution for the variable is used for the parameter. &lt;/span>&lt;/span>&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="bindingVariable" ordered="false"
        lowerBound="1" eType="#//Variable">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The binding variable.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParametricSlotAssignment" eSuperTypes="#//ParametricVariationPoint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A parametric slot assignment is a parametric variation point which specifies that a value arriving as parameter will be assigned to a particular slot in a particular object in the base model. The object is identified via an object handle pointing to the base model, The object is identified via an object handle, and the the slot is identified via its name, as indicated in the attribute slotIdentifie. The variation point must be bound to a variable which will provide the value coming as parameter.&lt;br>&lt;br>When this variation point is applied, the value coming as parameter is inserted into the base model slot&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : The slotIdentifier must correspond to a property name of the associated ObjectHandle&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ParametricSlotAssignment&lt;/p>&lt;p>-- The slotIdentifier must correspond to a property name of the associated ObjectHandle&lt;/p>&lt;p>context ParametricSlotAssignmet :&lt;/p>&lt;p>inv slotIdentifierExists :&lt;/p>&lt;p>self.slotOwner.getPropertyByName(self.slotIdentifier)&lt;/p>&lt;p>null&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of a ParametricSlotAssignment, the ObjectHandle slotOwner must exist in the base model.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a ParametricSlotAssignment has been executed, the slot identified by the slotIdentifier and contained in the ObjectHandle slotOwner is assigned with a given value.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ParametricSlotAssignment&lt;/p>&lt;p>context ParametricSlotAssignmet::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre : ctx.resolvedModelElements->includes(self.slotOwner)&lt;/p>&lt;p>post: self.slotOwner.getPropertyValue(self.slotIdentifier)->asOrderedSet()->first() == (VariableValueAssignment.allInstances()->select (varValueAssign | (self.bindingVspec&lt;/p>&lt;p>->includes(varValueAssign.resolvedVariable)))->asOrderedSet()->first().value)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="slotIdentifier" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The name of the slot identifier.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="slotOwner" ordered="false"
        lowerBound="1" eType="#//ObjectHandle" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The slot owner.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveValueSpecification" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p> A PrimitiveValueSpecification contains an expression in our Basic Constraint Language and is typed by a primitive type.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="expression" ordered="false"
        lowerBound="1" eType="#//BCLExpression" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Expression specifying the value.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BCLConstraint" eSuperTypes="#//Constraint">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Top class of a constraint. Contains basic constraint language expressions. &lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="expression" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//BCLExpression" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The constraining expression of this BCLConstraint.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OperationCallExp" eSuperTypes="#//BCLExpression">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>An expression that represents operations on given subexpressions (arguments). Operations include logical, arithmetic, relational operations, and two predicates.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="argument" ordered="false"
        upperBound="-1" eType="#//BCLExpression" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Expressions for the arguments of the operation to be called.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="operation" ordered="false"
        lowerBound="1" eType="#//Operation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Operation to be called.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="Operation">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Enumerates operations available in basic constraint language: logNot (logical negation), logAnd (logical conjunction), logOr (logical disjunction), logImplies (logical implication), logXor (logical exclusive-or), arithPlus (arithmetic addition), arithMinus (arithmetic subtraction), arithNeg (arithmetic negation), arithMult (arithmetic multiplication), arithDiv (arithmetic division), strConc (string concatenation), eq (equality), lte (less than or equal), gte (greater than or equal), lt (less than), gt (greater than), isDefined (checks if value is not bottom), isUndefined (checks if value is bottom)&lt;/p>"/>
    </eAnnotations>
    <eLiterals name="logNot">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Logical not&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="logAnd" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Logical and&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="logOr" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Logical or&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="logImplies" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Logical implies&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="logXor" value="4">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Logical xor&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="logIff" value="5">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Logical if and only if&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="arithPlus" value="6">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Arithmetic addition&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="arithMinus" value="7">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Arithmetic subtraction&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="arithNeg" value="8">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Arithmetic negation&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="arithMult" value="9">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Arithmetic multiplication&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="arithDev" value="10">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Arithmetic division&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="strConc" value="11">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>String concatenation&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="eq" value="12">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Equal&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="lte" value="13">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Logical less than or equal&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="gte" value="14">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Greater than or equal&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="lt" value="15">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Logical less than&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="gt" value="16">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Greater than&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="isDefined" value="17">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Checks if the value is defined.&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="isUndefined" value="18">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Check if the value is undefined.&lt;/p>"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BooleanLiteralExp" eSuperTypes="#//BCLExpression">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A literal expression that represents Boolean values ('true' or 'false').&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="bool" ordered="false" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The boolean literal value of this expression.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StringLiteralExp" eSuperTypes="#//BCLExpression">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A literal expression that represents strings.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="string" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The string value of this StringLiteralExpression.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NumericLiteralExp" eSuperTypes="#//BCLExpression">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p class=&quot;MsoPlainText&quot;>A literal expression that represents real, unlimited natural, and integer constants.&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IntegerLiteralExp" eSuperTypes="#//NumericLiteralExp">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A literal expression that represents integer numbers.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="integer" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The integer value of the IntegerLiteralExpression.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UnlimitedLiteralExp" eSuperTypes="#//NumericLiteralExp">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A literal expression that represents unlimited natural numbers.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="unlimited" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Value of this UnlimitedLiteralExpression.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RealLiteralExp" eSuperTypes="#//NumericLiteralExp">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>A literal expression that represents floating-point numbers.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="real" ordered="false" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The real value of this RealLiteralExpression.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CompoundResolution" abstract="true"
      eSuperTypes="#//ChoiceResolution">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>CompoundResolutions define roots of subtrees of VSpecResolutions.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="members" ordered="false"
        upperBound="-1" eType="#//VSpecResolution" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The members of the compound resolution constituting the next level of the resolution tree.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NegResolution" eSuperTypes="#//ChoiceResolution">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Negative Resolution. This means that the decision is negative and there is no need to continue down the eventual VNode tree referred by this NegResolution.&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PosResolution" eSuperTypes="#//CompoundResolution">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Positive Resolution. This means that one needs to resolve the eventual CompoundNode referred by this PosResolution.&lt;/p>"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VRef" eSuperTypes="#//Variabletype">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Variability Reference. A VRef is a reference to a node in the VSpec tree (VNode).&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refVSpec" ordered="false"
        upperBound="-1" eType="#//VSpec">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The VSpec referred by the VRef&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VRefValueSpecification" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>VRefValueSpecification defines the value of a VRef. The following invariant must hold: VRefValueSpecification.vSpecResolution.resolvedVSpec == VRefValueSpecification.type.refVSpec (with the appropriate qualifiers when there is multiplicity)&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="vSpecResolution" ordered="false"
        upperBound="-1" eType="#//VSpecResolution">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The resolution reference such that VSpecResolution.resolvedVSpec == type.refVSpec&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ResolutionLiteralDefinition" eSuperTypes="#//CompoundResolution">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>Defines Resolution Literal as a named subtree of VSpecResolutions. This can then be reused through ResolutionLiteralUses.&lt;/p>&lt;p>Typically ResolutionLiteralDefinitions are used to name and store subproducts that are either existing or planned.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : Let the ResolutionLiteralDefinition be 'rlit' and its owner 'rlitown' then rlitown.resolvedVSpec owns rlit.literalType.&lt;/p>&lt;p>Informally this means that the resolution literals are placed in the resolution model parallel to where the corresponding VType is placed in the variability model.&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="literalType" ordered="false"
        eType="#//VType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The VType defining the details of the ResolutionLiteralDefinition. There must be pairwise correspondence between elements of the ResolutionLiteralDefinition tree and that of the literalType tree.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ResolutionLiteralUse" eSuperTypes="#//ChoiceResolution">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>The use of a resolution literal. This is like an instance of a resolution type.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="defLiteral" ordered="false"
        eType="#//ResolutionLiteralDefinition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Referring to the resolution literal definition of this use&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BVRModel" eSuperTypes="#//VPackage">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p>BVRModel holds the whole BVR model with abstraction layer, realization layer and base models.&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="variabilityModel" ordered="false"
        lowerBound="1" eType="#//CompoundNode" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The variability model (VSpec tree) corresponding to feature models&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="resolutionModels" ordered="false"
        upperBound="-1" eType="#//CompoundResolution" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Resolution models are defining the configurations of the products&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="baseModelBase" ordered="false"
        lowerBound="1" eType="#//ObjectHandle" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The base model which will be used as starting point for creating products in the base language&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="baseModelLibraries" ordered="false"
        upperBound="-1" eType="#//ObjectHandle" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>Base libraries used additively in creating products from the baseModelBase&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizationModel" ordered="false"
        upperBound="-1" eType="#//VariationPoint" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The realizationModel consists of the variation points used to respresent the realization of the variabilityModel given the resolutionModel. The variation points define the changes done with the base model to fulfill the configurations specified.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChoiceVSpec" abstract="true" eSuperTypes="#//VSpec">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>A ChoiceVSpec is a VSpec which either Choice or ChoiceOccurence.&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>&lt;/span>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : If a choice is implied by parent, it must have a parent.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- Choice&lt;/p>&lt;p>-- If a choice is implied by parent, it must have a parent.&lt;/p>&lt;p>context Choice :&lt;/p>&lt;p>inv isImpliedByParentsImpliesAParent :&lt;/p>&lt;p>self.isImpliedByParent implies VSpec.allInstances()-&amp;gt;exists(vSpec | vSpec.childVSpec-&amp;gt;includes(self))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="defaultResolution" ordered="false"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>The default resolution of this choice. (If True then the default is a PosResolution, if False then the default is a NegResolution)&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isImpliedByParent" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="&lt;p>When True then resolving the parent VSpec positively implies deciding this choice  positively. A VSpec resolution is positive if it is a choice decided positively, or any classifier instantiation, or any value assignment to a variable.&lt;br>&lt;br>For a root choice, True implies it must be resolved positively.&lt;/p>"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
</ecore:EPackage>
